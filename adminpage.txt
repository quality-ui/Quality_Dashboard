import React, { useEffect, useState, useMemo } from "react";
import axios from "axios";
import "./AdminPage.css";

// ✅ Automatically ensure /api is in the base URL
const rawBase = process.env.REACT_APP_API_URL || "http://localhost:5000";
const API_BASE_URL = rawBase.endsWith("/api") ? rawBase : `${rawBase}/api`;

export const AdminPage = () => {
  const [users, setUsers] = useState([]);
  const [editingUser, setEditingUser] = useState(null);
  const [newUser, setNewUser] = useState({ name: "", email: "", password: "", role: "user" });
  const [message, setMessage] = useState("");

  const token = useMemo(() => localStorage.getItem("token"), []);

  // ✅ Fetch all users
  const fetchUsers = async () => {
    try {
      const res = await axios.get(`${API_BASE_URL}/admin/users`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setUsers(res.data);
    } catch (err) {
      console.error("Fetch users failed:", err);
      setMessage("Failed to fetch users.");
    }
  };

  // ✅ Add new user (Admin only)
  const handleAddUser = async (e) => {
    e.preventDefault();
    try {
      const res = await axios.post(`${API_BASE_URL}/admin/users`, newUser, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setMessage(res.data.message || "User added successfully");
      setNewUser({ name: "", email: "", password: "", role: "user" });
      fetchUsers();
    } catch (err) {
      console.error("Create user failed:", err);
      setMessage(err.response?.data?.message || "Error creating user");
    }
  };

  // ✅ Delete user
  const handleDelete = async (id) => {
    if (!window.confirm("Are you sure you want to delete this user?")) return;
    try {
      const res = await axios.delete(`${API_BASE_URL}/admin/users/${id}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setMessage(res.data.message);
      fetchUsers();
    } catch (err) {
      console.error("Delete failed:", err);
      setMessage(err.response?.data?.message || "Error deleting user");
    }
  };

  // ✅ Edit user (popup modal)
  const handleEdit = (user) => setEditingUser({ ...user, password: "" });

  const handleUpdate = async (e) => {
    e.preventDefault();
    try {
      const res = await axios.put(`${API_BASE_URL}/admin/users/${editingUser.id}`, editingUser, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setMessage(res.data.message);
      setEditingUser(null);
      fetchUsers();
    } catch (err) {
      console.error("Update failed:", err);
      setMessage(err.response?.data?.message || "Error updating user");
    }
  };

  useEffect(() => {
    fetchUsers();
  }, []);

  return (
    <div className="admin-container">
      <h2>Admin Panel — Manage Users</h2>

      {message && <p className="message">{message}</p>}

      {/* ✅ Register New User Form */}
      <form className="user-form" onSubmit={handleAddUser}>
        <input
          type="text"
          placeholder="Name"
          value={newUser.name}
          onChange={(e) => setNewUser({ ...newUser, name: e.target.value })}
          required
        /><br></br>
        <input
          type="email"
          placeholder="Email"
          value={newUser.email}
          onChange={(e) => setNewUser({ ...newUser, email: e.target.value })}
          required
        /><br></br>
        <input
          type="password"
          placeholder="Password"
          value={newUser.password}
          onChange={(e) => setNewUser({ ...newUser, password: e.target.value })}
          required
        /><br></br>
        <select
          value={newUser.role}
          onChange={(e) => setNewUser({ ...newUser, role: e.target.value })}
        >
          <option value="user">User</option>
          <option value="admin">Admin</option>
        </select><br></br>
        <button type="submit">Register User</button><br></br>
      </form>

      {/* ✅ User Table */}
      <table className="user-table">
        <thead>
          <tr>
            <th>Name</th><th>Email</th><th>Role</th><th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {users.map((u) => (
            <tr key={u.id}>
              <td>{u.name}</td>
              <td>{u.email}</td>
              <td>{u.role}</td>
              <td>
                <button onClick={() => handleEdit(u)}>Edit</button>
                <button onClick={() => handleDelete(u.id)}>Delete</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* ✅ Edit Modal */}
      {editingUser && (
        <div className="modal">
          <div className="modal-content">
            <h3>Edit User</h3>
            <form onSubmit={handleUpdate}>
              <input
                type="text"
                value={editingUser.name}
                onChange={(e) => setEditingUser({ ...editingUser, name: e.target.value })}
              />
              <input
                type="email"
                value={editingUser.email}
                onChange={(e) => setEditingUser({ ...editingUser, email: e.target.value })}
              />
              <input
                type="password"
                placeholder="New Password (optional)"
                value={editingUser.password}
                onChange={(e) => setEditingUser({ ...editingUser, password: e.target.value })}
              />
              <select
                value={editingUser.role}
                onChange={(e) => setEditingUser({ ...editingUser, role: e.target.value })}
              >
                <option value="user">User</option>
                <option value="admin">Admin</option>
              </select>
              <div className="modal-buttons">
                <button type="submit">Save</button>
                <button type="button" onClick={() => setEditingUser(null)}>Cancel</button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};
